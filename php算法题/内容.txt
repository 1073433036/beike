1、一群猴子排成一圈，按1，2，…，n依次编号。然后从第1只开始数，
	数到第m只,把它踢出圈，从它后面再开始数，再数到第m只，在把它踢出去…，
	如此不停的进行下去，直到最后只剩下一只猴子为止，那只猴子就叫做大王。
	要求编程模拟此过程，输入m、n, 输出最后那个大王的编号
	function king($n, $m){
    $monkeys = range(1, $n);         //创建1到n数组
	$i=0;
	while (count($monkeys)>1) {	 //循环条件为猴子数量大于1
		if(($i+1)%$m==0) {	 //$i为数组下标;$i+1为猴子标号
			unset($monkeys[$i]);	//余数等于0表示正好第m个，删除，用unset删除保持下标关系
		} else {
			array_push($monkeys,$monkeys[$i]);     //如果余数不等于0，则把数组下标为$i的放最后，形成一个圆形结构
			unset($monkeys[$i]);
		}
			$i++;//$i 循环+1，不断把猴子删除，或 push到数组 
	}
	return current($monkeys);	//猴子数量等于1时输出猴子标号，得出猴王
}
echo king(6,3);
==================================================================================================================
2、有一母牛，到4岁可生育，每年一头，所生均是一样的母牛，到15岁绝育，不再能生，20岁死亡，问n年后有多少头牛。

function niu($y){
	static $num= 1;					//定义静态变量;初始化牛的数量为1
	for ($i=1; $i <=$y ; $i++) { 	
		if($i>=4 && $i<15){	      //每年递增来算，4岁开始+1，15岁不能生育
		$num++;
			niu($y-$i);			    //递归方法计算小牛$num，小牛生长年数为$y-$i
		}else if($i==20){			
		$num--;	                         //20岁死亡减一
		}
	return $num;
}
=================================================================================================================
3、$arr = array(15,3,6,10,7,1);
请使用,桶排序，冒泡排序，快速排序，安装从大到小排序
快速排序
		$arr = array(1,4,9,30,4,60,2);
	function quickSort($arr){
		$length = count($arr);
		if($length <= 1){
			return $arr;
		}
		$base_num = $arr[0];
		$left_array = array();
		$right_array = array();
		for($i=1;$i < $length;$i++){
			if($base_num < $arr[$i]){
				$right_array[] = $arr[$i];
			}else{
				$left_array[] = $arr[$i];
			}
		}
		$left_array=quickSort($left_array);
		$right_array=quickSort($right_array);

		return array_merge($left_array,array($base_num),$right_array);
	}
	$newarr = quickSort($arr);
	print_r($newarr);
=================================================================================================================
4.$arr = array(1,3,4,5,6,7,10);不允许使用任何倒叙内置函数，倒叙
		$arr = array(1,3,4,5,6,7,10);
		$length = count($arr);
		$arrResult = array();
		for($i=$length;$i--;$i>0){
			array_push($arrResult,$arr[$i]);
		}
		print_r($arrResult);
=================================================================================================================
	第二种思路:求出2的倍数放进数组，不是2的倍数方数组
=================================================================================================================
	第三中思路:
		两个一组
			$arr = array(1,2,3,4,5,6,7);
	$length = count($arr);
	$num=0;
	$arrResult=array();
	for($i=0;$i<$length;$i=$end){
		$arrResult[$num]=array();
		$first = $i;
		$end= $i+2 >= $length ? $length : $i+2;

		for($first;$first<$end;$first++){
			array_push($arrResult[$num],$arr[$first]);
		}
		$num++;
	}
	print_r($arrResult);
=================================================================================================================
5.$a=10; $arr = array(1,4,6,9,12,50); 将$a插入对应得位置安装从小到大顺序
=================================================================================================================
6.请计算5的阶乘等于多少
	$num=1;
	for($i=1;$i<=5;$i++){
		$num = $num*$i;
	}

	echo $num;
=================================================================================================================
7.打印九九乘法表
=================================================================================================================
8.打印杨辉三角
	$level=9;
	for($i=0;$i<$level;$i++){
		for($j=0;$j<=$i;$j++){
			if($j==0 || $i==$j){
				$arr[$i][$j]=1;
			}else{
				$arr[$i][$j]=$arr[$i-1][$j]+$arr[$i-1][$j-1];
			}
			echo $arr[$i][$j]."\t";
		}
		echo "<br />";
	}
=================================================================================================================
10.二分查找算法（折半查找算法）[快速查找]
 $arr = array(1,3,4,5,6,67,90,100);
 function quickfind($arr,$value){
 	$length = count($arr);
 	$hight  = $length-1;
 	$lower  = 0;
 	while($lower < $hight){
 		$middle = intval(($lower+$hight)/2);
 		if($arr[$middle] > $value){
 			$hight = $middle-1;
 		}elseif($arr[$middle] > $value){
 			$lower = $middle+1;
 		}else{
 			return $middle;
 		}

 		return false;
 	}
 }
$num=5;
$middle = quickfind($arr,$num);
echo $middle;
=================================================================================================================
11.对应得位置加入数字
	$arr = array(1,3,6,9,10,20,45);
	$insert = 7;
	$length = count($arr);
	$index=0;
	for($i=0;$i<$length;$i++){
		if($arr[$i] < $insert){
			$index = $i;
		}
	}
	for($i=$length-1;$i>$index;$i--){
		$newIndex = $i+1;
		$arr[$newIndex] =$arr[$i]; 
	}
	$arr[$index+1]=$insert;
	print_r($arr);
=========================================================================================
12.对应得位置删除数字
	$arr = array(1,2,3,6,9,10,20,40);
	$delete = 6;
	$length = count($arr);
	$index=0;
	for($i=0;$i<$length;$i++){
		if($arr[$i] == $delete){
			$index = $i;
			break;
		}
	}
	while($index < $length) {
		$end = $index+1;
		$end = $end >= $length ? $length-1 : $end;
		$arr[$index]=$arr[$end];
		$index++;
	}
	unset($arr[$length-1]);
	print_r($arr);
=========================================================================================
13.递归便利目录
=========================================================================================
14.
	1>11.有个人想上一个n级的台阶，每次只能迈1级或者迈2级台阶，
		问：这个人有多少种方法可以把台阶走完？例如：总共3级台阶，
			可以先迈1级再迈2级，或者先迈2级再迈1级，或者迈3次1级总共3中方式
		function jieti($num){	//实际上是斐波那契数列
			return $num<2? 1:jieti($num-1)+jieti($num-2);
		}
	2>从一个标准的Url[https://abcde.com/aa/txt/cc/.txt]提取出文件的扩展名[有多少种办法7中办法]
=========================================================================================
高级部分
[https://blog.csdn.net/s1070/article/details/51174725]
=========================================================================================
15.使对象可以像数组一样进行foreach循环，要求属性必须是私有。(Iterator模式的PHP5实现，写一类实现Iterator接口)
	class Test implements Iterator{
		private $item = array("id"=>1,"name"=>"lisi","age"=>20);
		private $info = array("name"=>"sdfdsds","age"=>20);
		public function rewind(){
			reset($this->info);
		}

		public function current(){
        	return current($this->info);
		}

		public function key(){
        	return key($this->info);
		}

		public function next(){
        	return next($this->info);
		}

		public function valid(){
        	return($this->current()!==false);
		}
	}
	$t = new Test();
	foreach ($t as $key => $value) {
		echo $key;
	}
	二：
=========================================================================================
16.用PHP实现一个双向队列

<?php
    class Deque{
    private $queue=array();
    public function addFirst($item){
        return array_unshift($this->queue,$item);
    }
 
    public function addLast($item){
        return array_push($this->queue,$item);
    }
    public function removeFirst(){
        return array_shift($this->queue);
    }
 
    public function removeLast(){
        return array_pop($this->queue);
    }
}
=========================================================================================
