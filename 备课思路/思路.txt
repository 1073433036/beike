第一天:[https://www.cnblogs.com/myon/p/6242921.html]
	linux服务器基本使用
		文件操作
			cd ls,touch,cat,head,cat,rm,find,more,tar,gzip,ln pwd,date
		文件基本权限|软连接
			r	w	x 
			4   2   1
		赋权操作
			chown ===改变文件所属者
			chmod ====改变文件权限
========================================================================
课堂练习;
	1.请写一个shell文件
		目录操作
			mkdir,rm -rf
		进程端口操作
		ps kill,netstat,lsof,killall
	linux服务器优化分析
			sed find awk
	sed  ===帮你修改文件里面的内容   sed "s/2/c/g" 1.txt 
	grep ===过滤文件里面的内容 cat 2.txt  | grep -E "abc"
	awk====awk -F " " '{print $1}' 2.txt
	cut===
	wc==== cat 2.txt  | wc -l
	sort=== cat 2.txt | sort -d
问题:
	1.通过access.log查看访问网站次数最多的前10名IP地址
	2.统计访问页面前10的url页面
服务器监控指标
	监控指标【uptime检查】
		 18:25:11 up 1 day, 20:27,  1 user,  load average: 0.01, 0.02, 0.05
		 1.当前时间 04:03:58
		 2.系统已运行的时间 10 days, 13:19
		 3.当前在线用户 1 user
		 4.平均负载：0.01, 0.78, 1.11，最近1分钟、5分钟、15分钟系统的负载
	【cpu占比】
			[root@iz2zefwlhq937bc2wfpp1oz ~]# top | grep Cpu
			%Cpu(s):  0.0 us,  6.2 sy,  0.0 ni, 93.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
			%Cpu(s):  0.3 us,  0.0 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
			%Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
			%Cpu(s):  0.0 us,  0.3 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
			%Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
			%Cpu(s):  0.7 us,  0.3 sy,  0.0 ni, 99.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
			us:表示cpu执行用户进程所占用时间，越多越好
			sy:cpu在加载内核上面所调度时间
			ni:系统在调度进程过程中花费的时间
			id:cpu的空闲时间越多越不好
			wa:cpu在等待io操作花费的时间
	【磁盘占用空间】
	【目录所占用空间】
	【网络监控】
	【磁盘IO】
	
作业：
	1.使用shell脚本统计个个服务器每分钟信息
	2.使用shell脚本对访问日志切片
============================================================
第二
	nginx 配置文件讲解
	nginx location匹配规则
		精准匹配:=
		正则匹配:~
		默认匹配:/
	nginx rewrite
		location /aa {
			rewrite ^/(.*)$  https://www.baidu.com;
		}
	nginx if判断
		-f ===文件
		-d ==目录
		-e ==是否存在
	nginx常用变量
		$args ： #这个变量等于请求行中的参数，同$query_string
		$content_length ： 请求头中的Content-length字段。
		$content_type ： 请求头中的Content-Type字段。
		$document_root ： 当前请求在root指令中指定的值。
		$host ： 请求主机头字段，否则为服务器名称。
========$http_user_agent ： 客户端agent信息
		$http_cookie ： 客户端cookie信息
		$limit_rate ： 这个变量可以限制连接速率。
========$request_method ： 客户端请求的动作，通常为GET或POST。
		$remote_addr ： 客户端的IP地址。
		$remote_port ： 客户端的端口。
		$remote_user ： 已经经过Auth Basic Module验证的用户名。
========$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。
		$scheme ： HTTP方法（如http，https）。
		$server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。
		$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。
		$server_name ： 服务器名称。
		$server_port ： 请求到达服务器的端口号。
		$request_uri ： 包含请求参数的原始URI，不包含主机名。
		$uri ： 不带请求参数的当前URI，$uri不包含主机名。
		$document_uri ： 与$uri相同
	nginx反向代理搭建
	文件系统nfs+nsync
	作业：部署之前的pc项目+配合nginx的反向代理
============================================================
第三天
优化[前台优化]
	SEO优化
	伪静态
		重写[rewrite]
	真静态
		ob缓存
		ob_start() 开启
		ob_get_contents()  获取缓存中的数据
		ob_clean()  清空缓存中的数据
		ob_end() 关闭ob缓存
		ob_end_clean() 清空缓存并关闭ob缓存
		ob_flush()  刷新缓冲区
	配合使用:
作业:完成之前项目首页实现真静态之前pc网站
============================================================
第四天[nginx反向代理]
	nginx配置反向代理
		算法模式:
			轮询
			权重  weight
			ip_hash
			upstream模块
			backup
			
实例:
--------------------------------------------------------轮询
    upstream test_info {
      server 192.168.206.133:80;
      server 192.168.206.137:80;
   }
proxy_pass http://test_info;
--------------------------------------------------------权重
upstream test_info {
      server 192.168.206.133:80 weight=1;
      server 192.168.206.137:80 weight=2;
   }
-------------------------------------------------------ip哈希
upstream test_info {
      ip_hash;
      server 192.168.206.133:80;
      server 192.168.206.137:80;
}
-------------------------------------------------------备份服务器
    upstream test_info {
      server 192.168.206.133:80;
      server 192.168.206.137:80 backup;
   }
  session共享问题
    php.ini
		1315:session.save_handler = files ===session存储方式
		1344:session.save_path = "/tmp"   ====存储在服务器那个位置
 项目部署到不同的服务器上面去
 nfs网络文件系统
 作业:写一个注册登录功能通过反向代理调度到不同服务器，实现登录
================================================================================
第五天
keepalived和nginx反向代理整合
动静分离
================================================================================
第六天
	动静分离
		locaton
	php和nginx连接方式
		cgi 
		fastcgi
		socket
		php-fpm
	#php和session关系
	sesison存储文件
	session存储数据库
	session存储数据库或者缓存
	session_set_save_handler("open", "close", "read", "write", "destroy", "gc");
================================================================================
第七天:
	mysql数据库
	字段
		字符串
			char(M)   ===固定长度
			varchar(M)===可变长度
			text
		整形
			tinyint(M)==1个字节=2^0=1=127=
			smallint(M)==2个字节=2^1=2=256*256=65536/2 =32768
			int(M) ===4字节==2^2=4=2^32=256^4=65536^2=
			bigint(M)===8个字节=2^3=8==256^8=
		小数
			float
			decimal
		时间
			YEAR
			TIME
			DATE
			DATETIME
		枚举 
			enum
		乱码问题:中文mysql
		字符集 gbk  utf8 utf8mb4
				2     3     4
			1.设置你表的编码
			2.设置mysql你一什么样的方式写入我存储的数据[set names gbk|utf8]
			3.查看的时候你也要设置mysql编码[set names utf8|gbk]
================================================================================
	字符集 gbk  utf8 utf8mb4
				2     3     4
			1.设置你表的编码
			2.设置mysql你一什么样的方式写入我存储的数据[set names gbk|utf8]
			3.查看的时候你也要设置mysql编码[set names utf8|gbk]
	表
		表操作
			DDL
				INSERT,UPDATE,SELECT,DELETE
			DML
				alter table tableName add column columnName  type [添加列]
				alter table tableName change column name name1 varchar(100);[修改列]
				alter table tableName drop column columnName [删除列]
		分表
			一个表里面数据太多了一个表有几百亿条数据200G，一个表如果数据量上百万
				id goods_name goods_id order_id pay_status  createtime
				
			垂直分表  ===分字段
			水平分表  ===分数据
		存储引擎
			Innodb
			myisam
				数据结构区别
					myisam:行级结构
					innodb:二叉树
				物理文件区别
					mysiam:
						.frm====表结构
						.MYD====表数据
						.MYI====索引
					Innodb:
						.frm=====表结构
						.ibd=====数据
				读和写区别
					如果你网站业务是读
						mysaim 读快
						innodb写慢，读也慢，但是安全
						
				事物区别
					innodb支持事物，支持行锁
					mysaim不支持事物 支持表锁
================================================================================
	mysql锁[https://www.cnblogs.com/jpfss/p/8890250.html]
		分类:
			myisam
			读锁【共享读】
			写锁 【独占写】
		分类特点
			表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。
			行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高
		表锁【秒杀场景】
			读锁[共享锁]案例
			写锁[排他锁]案例
		innodb
		行锁
			共享锁
			排他锁
================================================================================
	优化[表]
		索引:其实就是一本书的目录
			索引类型
				普通索引
					alter table tableName add index(字段名);
				复合索引
					alter table tableName add index(字段1,字段2);
					
					alter table ttt add index(id,name);
					
					select * from ttt where name="aaaa" and id=6;
					select * from ttt where  id=6 and name="aaaa"; #用索引
					select * from ttt where id=6; #用
					select * from ttt where name="aaaa";
				唯一索引 唯一:表里面内容唯一
					alter table ttt add unique(name);
				主键索引[primary key]
				聚簇索引
				全文索引
					like
					看下splinx
			查看mysql索引
				explain
			索引覆盖
				获取数据从索引文件里面拿去，不是从表文件里面获取
			延迟关联
					select * from tableName limit offset pageNum
				分页
			添加多个索引
				索引重复添加:禁止一个字段添加多个索引
			set profile
			参考地址[https://www.cnblogs.com/lizhanwu/p/4191765.html]
===============================================================================
	sql表连接
		inner join
		left join
		right join
作业：写原生sql明天查看
布置作业:
================================================================================
	mysql视图
		创建视图
			create view viewName(name,age) as +sql语句
		查看视图
			sql语句查询一样
		删除视图
			drop view + viewName
		替换视图
			第一种思路
				create or replace view viewName(字段1,字段2) as sql语句
			第二种思路
				alter table viewName(字段1,字段2) as +sql语句
		修改视图:
			sql语句修改+视图修改表原始文件也修改了
	mysql触发器
		什么是触发器
			触发器是一种特殊的存储过程，是嵌入到mysql的一段程序，它在插入，删除或修改特定表中的数据时触发执行
		如何创建触发器
			创建:
				create trigger+触发器名称+before|after+触发事件
				on +表名 for each row
				begin
					//要执行的sql语句
				end
			测试:
				create table goods(
					id int(11) primary key auto_increment,
					name varchar(10),
					store int
				);
				create table orders (
					id int(11) primary key auto_increment,
					order_name varchar(10),
					order_num int(11)
				);
			触发器:
				实例1:
					delimiter $$
					create trigger test_trigger_1 after insert 
					on orders 
					for each row
					begin
					update goods set store = store-1 where id =1;
					end
					delimiter ;
			查看触发器:
				mysql> show triggers\G;
			删除触发器:
				mysql> drop trigger test_trigger_2;
			测试:
				mysql> insert into orders set order_name="aaa",order_num=1;
		总结:在修改订单表时候不用再使用程序修改商品表里面库存.
		new的使用
			第二个例子:
			delimiter $$
			create trigger test_trigger_2 after insert
			on orders
			for each row
			begin
				update goods set store=store-new.order_num where id = new.c_id;
			end $$
			delimiter ;
================================================================================
	mysql存储过程
	
	事物的隔离级别
作业:使用存储过程模式上千万数据
================================================================================
第八天:mysql日志
	配置文件[/etc/my.conf]
		general-log=ON
		general-log-file=/usr/local/mysql/data/localhost_genarel.log
	查询日志
		show variables like "%general_log%";
		+------------------+-------------------------------------+
		| Variable_name    | Value                               |
		+------------------+-------------------------------------+
		| general_log      | OFF                                 |
		| general_log_file | /usr/local/mysql/data/localhost.log |
		+------------------+-------------------------------------+
		mysql> set global general_log=ON;
		mysql> show variables like "%general_log%";
		+------------------+-------------------------------------+
		| Variable_name    | Value                               |
		+------------------+-------------------------------------+
		| general_log      | ON                                  |
		| general_log_file | /usr/local/mysql/data/localhost.log |
		+------------------+-------------------------------------+
	慢查询日志[配置文件]
		long_query_time=1
		log_slow_queries=/usr/local/mysql/data/slow.log
		mysql> show variables like "%query%";
		+------------------------------+--------------------------------+
		| Variable_name                | Value                          |
		+------------------------------+--------------------------------+
		| ft_query_expansion_limit     | 20                             |
		| have_query_cache             | YES                            |
		| long_query_time              | 1.000000                       |
		| query_alloc_block_size       | 8192                           |
		| query_cache_limit            | 1048576                        |
		| query_cache_min_res_unit     | 4096                           |
		| query_cache_size             | 0                              |
		| query_cache_type             | ON                             |
		| query_cache_wlock_invalidate | OFF                            |
		| query_prealloc_size          | 8192                           |
		| slow_query_log               | ON                             |
		| slow_query_log_file          | /usr/local/mysql/data/slow.log |
		+------------------------------+--------------------------------+
	二进制日志
		server_id=100
		log-bin=mysql_bin
		查看:
			show binlog events;[只查看binlog文件内容]
			show binlog events in 'mysql_bin.000001'; [制定文件内容]
			show binary logs;[binlog文件列表]
	数据恢复
		到时候在演示
==============================================================
第九天:
	mysql数据库主从搭建 || 主主搭建

	
	将上月pc项目数据库使用mysql主从分离
	数据库中间件athlas
===============================================================
第十天:
	设计模式
	单利模式
	工厂模式
		类自动加载
		autoload
		spl_register_autolaod()
		命名空间[namespace]
	
作业:
	暂定:使用各种设计模式封装一个mvc加上使用composer
	完成一个企业站:5天时间
	企业站使用的框架必须是自己搭建的。使用的环境架构也必须是自己搭建的
===============================================================
swoole
	演示swoole使用+websocket
		数据处理
		做语音聊天室
		异步任务
		HttpWerver
		携程
	完成:实时聊天项目
=====================================================================
数据结构部分
链表
队列
栈
堆
树
=====================================================================

第四天:[可以考虑不讲解]
简单算法
	桶排序
	冒泡排序
	快速排序
	卢瑟福环
	菲波那切数列数列
		<?php 
			$arr[1] = 1;
			for($i = 2;$i < 100;$i++)
			{
				$arr[$i] = $arr[$i-1] + $arr[$i-2];
			}
			echo join(",",$arr);//将数组合并为一个字符串输出
		?>
作业:暂定
============================================================
第六天:
	sql语句练习
作业:学生来讲解sql语句+大部分自己讲解
============================================================
第九天：keepalived+nginx反向代理
		lvs+keepalived做负载均衡
		session && cookie 问题
		